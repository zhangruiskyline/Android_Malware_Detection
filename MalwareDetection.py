import os
import json
import hashlib
import logging
import json
from sqlalchemy import create_engine
from UrlDB import MaliciousURL,checkUrlRecord,checkMD5Record,checkNameandSizeRecord,insertAPK
import requests
from urlparse import urlparse
from apk_parse.apk import APK
from virus_total_apis import PublicApi as VirusTotalPublicApi
import requests
from apk_download import APK_Download



#Define the return code here
EXIT_CODES = ['DB_no_connection','VirusTotal_no_connection','isMalware','isClean','NotValid']

API_KEY = 'a7ceb212f39d6a547859c65eb42b4ebacf48f90ea024ed71e5470b47f4688e31'

class MalwareDetection:

    def __init__(self):
        pass

    def isMalware(self, url):
        # Preprocess to remove query information to get absolute url link
        o = urlparse(url)
        url_clean = o.scheme + "://" + o.netloc + o.path

        # Check whether it is valid APK
        path = urlparse(url_clean).path
        if os.path.splitext(path)[1] != '.apk':
            return EXIT_CODES.index('NotValid')

        #download apk file and parse it

        download_apk = APK_Download(url_clean)
        if download_apk is None:
            return EXIT_CODES.index('NotValid')

        apk_file = APK(download_apk)
        #print apk_file.file_size
        #print apk_file.filename


        '''
        business logic here
        '''
        #step 1: check whether url matches DB record of malicoius url
        code = self.__MalwareDBcheck(url_clean)
        if code != EXIT_CODES.index('isClean'):
            return code
        #step 2: check name and size matches
        code = self.__MalwareNameandSizeCheck(apk_file)
        if code != EXIT_CODES.index('isClean'):
            return code
        # step 3: check md5 hash value
        code = self.__MalwareMD5check(apk_file)
        if code != EXIT_CODES.index('isClean'):
            return code
        # step 4: check
        code = self.__MalwareVirusTotalcheck(url_clean, apk_file)
        if code != EXIT_CODES.index('isClean'):
            return code

        return EXIT_CODES.index('isClean')

    @staticmethod
    def __MalwareDBcheck(apk_url):
        try:
            # to check database we will execute raw query
            if checkUrlRecord(apk_url) is True:
                return EXIT_CODES.index('isMalware')
        except Exception as e:
            return EXIT_CODES.index('DB_no_connection')

    @staticmethod
    def __MalwareNameandSizeCheck(apk_file):
        try:
            if checkNameandSizeRecord(APK(apk_file).filename, APK(apk_file).file_size) is True:
                return EXIT_CODES.index('isMalware')
        except Exception as e:
            return EXIT_CODES.index('DB_no_connection')

    @staticmethod
    def __MalwareMD5check(apk_url):
        try:
            # to check database we will execute raw query
            if checkUrlRecord(APK(apk_url).file_md5) is True:
                return EXIT_CODES.index('isMalware')
        except Exception as e:
            return EXIT_CODES.index('DB_no_connection')

    @staticmethod
    def __MalwareVirusTotalcheck(apk_url, apk_file):
        vt_instance = VirusTotalPublicApi(API_KEY)
        try:
            response = vt_instance.get_url_report(apk_url)
        except requests.exceptions.RequestException as e:
            print(e)
            return EXIT_CODES.index('VirusTotal_no_connection')

        # print json.dumps(response, sort_keys=False, indent=4)
        if "positives" in response["results"] and response["results"]["positives"] == 0:
            print "NO Virus", apk_file.filename
        else:
            # print "apk_file.file_md5",apk_file.file_md5
            # print "apk_file.filename",apk_file.filename
            # print "apk_file.file_size",apk_file.file_size
            # print "apk_url",apk_url
            print "Malware detected by VirusTotal", apk_file.filename
            try:
                insertAPK(apk_file.file_md5,apk_file.filename,apk_file.file_size,apk_url)
                return EXIT_CODES.index('isMalware')
            except:
                return EXIT_CODES.index('DB_no_connection')











