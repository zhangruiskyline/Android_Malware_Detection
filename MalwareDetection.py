import os
import json
import hashlib
import logging
import json
from sqlalchemy import create_engine
from UrlDB import MaliciousURL,checkUrlRecord,checkMD5Record,checkNameandSizeRecord,insertAPK
import requests
from urlparse import urlparse
from apk_parse.apk import APK
from virus_total_apis import PublicApi as VirusTotalPublicApi
import requests
from apk_download import APK_Download
import time


#Define the return code here
EXIT_CODES = ['isMalware','isClean','NotValid','DB_no_connection','VirusTotal_no_connection']

API_KEY = 'a7ceb212f39d6a547859c65eb42b4ebacf48f90ea024ed71e5470b47f4688e31'


class MalwareDetection:
    last_virustotal_visit_time = None
    scan_pending = []
    def __init__(self):
        pass

    def isMalware(self, url):
        # Preprocess to remove query information to get absolute url link
        o = urlparse(url)
        apk_url = o.scheme + "://" + o.netloc + o.path

        # Check whether it is valid APK
        path = urlparse(apk_url).path
        if os.path.splitext(path)[1] != '.apk':
            return EXIT_CODES.index('NotValid')

        # business logic here
        #download apk file and parse it

        download_apk = APK_Download(apk_url)
        if download_apk is None:
            return EXIT_CODES.index('NotValid')

        apk_file = APK(download_apk)

        try:
            if checkUrlRecord(apk_url) is True:
                return EXIT_CODES.index('isMalware')

            if checkNameandSizeRecord(apk_file.filename, apk_file.file_size) is True:
                return EXIT_CODES.index('isMalware')

            if checkMD5Record(apk_file.file_md5) is True:
                return EXIT_CODES.index('isMalware')
        except Exception as e:
            return EXIT_CODES.index('DB_no_connection')

        '''
        Virus Total Check
        '''
        vt_instance = VirusTotalPublicApi(API_KEY)
        self.__throttle_virustotal_api_call()

        #Submit file to Virus Total for scan
        scan_status = self.__virustotal_scan_submit(apk_file,vt_instance)
        if scan_status in EXIT_CODES:
            return scan_status

        scan_id = scan_status
        ret = self.__virustotal_scan_check(apk_file, vt_instance, scan_id)
        if ret is not None:
            if ret is EXIT_CODES.index('isMalware'):
                insertAPK(apk_file.file_md5, apk_file.filename, apk_file.file_size, apk_url)
            return ret

        return EXIT_CODES.index('isClean')

    def __virustotal_scan_submit(self,apk_file,vt_instance):
        response = vt_instance.scan_file(apk_file.filename)
        #print json.dumps(response, sort_keys=False, indent=4)

        # Hanlder different exception for API calls
        if "error" in response and response["error"] is not None:
            return EXIT_CODES.index('VirusTotal_no_connection')
        if response["response_code"] != 200 or response["results"]["response_code"] != 1:
            return EXIT_CODES.index('NotValid')

        # Wait until scan finished
        scan_id = response["results"]["scan_id"]
        self.scan_pending.append(scan_id)
        return scan_id

    def __virustotal_scan_check(self,apk_file,vt_instance,scan_id):
        while True:
            self.__throttle_virustotal_api_call()
            report = vt_instance.get_file_report(scan_id)
            #print json.dumps(report, sort_keys=False, indent=4)
            if report["response_code"] != 200:
                return EXIT_CODES.index('NotValid')
            if report["results"]["response_code"] != 1:
                return EXIT_CODES.index('NotValid')
            else:
                break

        #print json.dumps(report, sort_keys=False, indent=4)
        if "positives" in report["results"]:
            if report["results"]["positives"] is not 0:
                try:
                    return EXIT_CODES.index('isMalware')
                except Exception as e:
                    return EXIT_CODES.index('DB_no_connection')


    def __throttle_virustotal_api_call(self):
        # throttle API call to no more than 4 times per min(Free API call limit)
        if self.__class__.last_virustotal_visit_time is not None:
            time_diff = time.time() - self.__class__.last_virustotal_visit_time
            if (time_diff <= 16):
                time.sleep(16 - time_diff)
        self.__class__.last_virustotal_visit_time = time.time()












