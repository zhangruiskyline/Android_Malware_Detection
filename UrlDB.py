from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import create_engine, exists
from sqlalchemy.orm import relationship, sessionmaker
from sqlalchemy.schema import Column, ForeignKey
from sqlalchemy.types import Integer, String
from sqlalchemy import and_
from sqlalchemy import *
from sqlalchemy.sql import table, column, select, update, insert


Base = declarative_base()


class MaliciousURLTable(Base):
    __tablename__ = 'MaliciousURL'
    id = Column(Integer, primary_key=True)
    apk_md5 = Column(String) #md5 Hash of APK file
    apk_name = Column(String)
    apk_size = Column(Integer)
    apk_url = Column(String, nullable=False, unique=True)

def addRecord(self, urlkey, url):
    new_record = MaliciousURLTable(urlkey, url)
    session.add(new_record)
    session.commit()


def checkUrlRecord(self, url):
    records = session.query(MaliciousURLTable).filter(MaliciousURLTable.apk_url == url)
    if records is None:
        return False
    return True


def checkMD5Record(self, md5sum):
    records = session.query(MaliciousURLTable).filter(MaliciousURLTable.apk_md5 == md5sum)
    if records is None:
        return False
    return True


def checkNameandSizeRecord(self, name, size):
    records = session.query(MaliciousURLTable).filter(and_((MaliciousURLTable.apk_name == name),
                                                           (MaliciousURLTable.apk_size == size)))
    if records is None:
        return False
    return True


def insertAPK(self, md5, name, size, url):
    new_url = MaliciousURLTable(apk_md5=md5, apk_name=name, apk_size=size, apk_url=url)
    session.add(new_url)
    session.commit()



engine = create_engine('sqlite:///badurl.db')
# Create all tables in the engine. This is equivalent to "Create Table"
# statements in raw SQL.
Base.metadata.create_all(engine)
connection = engine.connect()
Session = sessionmaker(bind=engine)
session = Session()
