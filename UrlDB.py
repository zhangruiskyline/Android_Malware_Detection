from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import create_engine, exists
from sqlalchemy.orm import relationship, sessionmaker
from sqlalchemy.schema import Column, ForeignKey
from sqlalchemy.types import Integer, String
from sqlalchemy import and_, MetaData
from sqlalchemy import *
from sqlalchemy.sql import table, column, select, update, insert


Base = declarative_base()
metadata = MetaData()
engine = create_engine('sqlite:///BadUrl.db')
# Create all tables in the engine. This is equivalent to "Create Table"
# statements in raw SQL.
Base.metadata.create_all(engine)
connection = engine.connect()
# create a configured "Session" class
Session = sessionmaker(bind=engine)
# create a Session
session = Session()

class MaliciousURL(Base):
    __tablename__ = 'MaliciousURL'
    id = Column(Integer, primary_key=True)
    apk_md5 = Column(String) #md5 Hash of APK file
    apk_name = Column(String)
    apk_size = Column(Integer)
    apk_url = Column(String, nullable=False, unique=True)

def checkUrlRecord(url):
    records = session.query(MaliciousURL).filter(MaliciousURL.apk_url == url).first()
    if records is None:
        return False
    else:
        return True

def checkMD5Record(md5sum):
    records = session.query(MaliciousURL).filter(MaliciousURL.apk_md5 == md5sum).first()
    if records is None:
        return False
    return True

def checkNameandSizeRecord(name, size):
    records = session.query(MaliciousURL).filter(and_((MaliciousURL.apk_name == name),
                                                           (MaliciousURL.apk_size == size))).first()
    if records is None:
        return False
    else:
        return True

def insertAPK(md5, name, size, url):
    new_url = MaliciousURL(apk_md5=md5, apk_name=name, apk_size=size, apk_url=url)
    session.add(new_url)
    session.commit()


