from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import create_engine, exists
from sqlalchemy.orm import relationship, sessionmaker, mapper
from sqlalchemy.schema import Column, ForeignKey
from sqlalchemy.types import Integer, String
from sqlalchemy import and_, MetaData,orm
from sqlalchemy import *
from sqlalchemy.sql import table, column, select, update, insert


Base = declarative_base()
#engine = create_engine('sqlite:///MaliciousURLs.db')
engine = create_engine('sqlite:///test.db')
metadata = MetaData(bind=engine)



MaliciousURLs = Table('MaliciousURLs',metadata,
    Column('id',Integer, primary_key=True),
    Column('apk_md5',String), #md5 Hash of APK file
    Column('apk_name',String),
    Column('apk_size',Integer),
    Column('apk_url', String,  unique=True),)

class MaliciousURL(object):
    def __init__(self, md5, name, size, url):
        self.apk_md5 = md5
        self.apk_name = name
        self.apk_size = size
        self.apk_url = url


mapper(MaliciousURL,MaliciousURLs)

# Create all tables in the engine. This is equivalent to "Create Table"

metadata.create_all()
connection = engine.connect()
# create a configured "Session" class
Session = sessionmaker(bind=engine)
# create a Session
session = Session()


def checkUrlRecord(url):
    records = session.query(MaliciousURL).filter(MaliciousURL.apk_url == url).first()
    if records is None:
        return False
    else:
        return True

def checkMD5Record(md5sum):
    records = session.query(MaliciousURL).filter(MaliciousURL.apk_md5 == md5sum).first()
    if records is None:
        return False
    return True

def checkNameandSizeRecord(name, size):
    records = session.query(MaliciousURL).filter(and_((MaliciousURL.apk_name == name),
                                                           (MaliciousURL.apk_size == size))).first()
    if records is None:
        return False
    else:
        return True

def insertAPK(md5, name, size, url):
    new_url = MaliciousURL(md5, name, size, url)
    session.add(new_url)
    session.commit()









